<html>
    <head>
        <title>Citation Needed</title>
        <script type="text/javascript" src="http://d3js.org/d3.v2.js"></script>
        <script type="text/javascript" src="http://mbostock.github.com/d3/d3.geom.min.js"></script>
        <script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.min.js"></script>
        <link rel="icon" type="image/png" href="favicon.png"/>
        <style type="text/css">
            html, body {
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
                font-family: monospace, Courier;
            }

            rect {
                fill: #fff;
                stroke: #aaa;
            }

            .node {
              fill: #000;
            }

            .visit_link {
              stroke: #999;
              stroke-dasharray: 9, 5; 
              stroke-width: 2;
            }

            .focus_link {
                stroke: #aaa;
                stroke-width: 3; 
          }

          text {
            font: 10px sans-serif;
            pointer-events: none;
          }

          text.shadow {
            stroke: #fff;
            stroke-width: 3px;
            stroke-opacity: .8;
          }
        </style>
    </head>
    <body>
        <div style="text-align: center">
            <h1>Citation Needed</h1>
            <p>Observe the space below to visualize your wikipedia reading habits</p>
            <div id='chart'> </div>
        </div>
        <script type="text/javascript">
    
            var charge = -60,
                linkDistance = 80;

            var w = 960,
                h = 720,
                fill = d3.scale.category20(),
                last_node = [w/2,h/2],
                nodes = [],
                links = [],
                index = {};
            

            var vis = d3.select('#chart').append("svg:svg")
                .attr("width", w)
                .attr("height", h);

            var vlinks = vis.append("svg:g");
            var vnodes = vis.append("svg:g");
            var vtext = vis.append("svg:g");

            node = vnodes.selectAll("g.nodegroup")
            link = vlinks.selectAll("line.visit_link, line.focus_link")

            var force = d3.layout.force()
                .linkDistance(linkDistance)
                .charge(charge)
                .nodes(nodes)
                .links(links)
                .size([w, h])
                .on("tick", tick);

            /*
            vis.on("mousemove", function() {
              cursor.attr("transform", "translate(" + d3.svg.mouse(this) + ")");
            });

            vis.on("mousedown", function() {
              var point = d3.svg.mouse(this),
                  node = {x: point[0], y: point[1]},
                  n = nodes.push(node);

              // add links to any nearby nodes
              nodes.forEach(function(target) {
                var x = target.x - node.x,
                    y = target.y - node.y;
                if (Math.sqrt(x * x + y * y) < 30) {
                  links.push({source: node, target: target});
                }
              });

              restart();
            });
             */
            
            function hit_topic(referrer, topic, type) {
                var point = [w/2 + 10-Math.random()*5, h/2 + 10-Math.random()*5];
                if(topic != null) {
                    if(!(topic in index)) {
                        topic_node = {x: point[0], y: point[1], topic: topic};
                        index[topic] = topic_node;
                        n = nodes.push(topic_node);
                    } else {
                        topic_node = index[topic]
                    }
                }
                if (referrer != null) {

                    if(!(referrer in index)) {
                        ref_node = {x: point[0], y: point[1], topic: referrer};
                        index[referrer] = ref_node;
                        n = nodes.push(ref_node);
                    } else {
                        ref_node = index[referrer];
                    }
                }
                if(topic != null && referrer != null) {
                    links.push({source: ref_node, target: topic_node, 'cl': type});
                }
                restart();
            }

            function restart() {
              var k = Math.sqrt(nodes.length / (w*h));
              force.charge(-10/k);
              force.gravity(100*k);
              l = vlinks.selectAll("line.visit_link,line.focus_link")
                  .data(force.links())
                  .enter().append("svg:line", "circle.node")
                  .attr("class", function(d) {return d.cl})
                  .attr("x1", function(d) { return d.source.x; })
                  .attr("y1", function(d) { return d.source.y; })
                  .attr("x2", function(d) { return d.target.x; })
                  .attr("y2", function(d) { return d.target.y; });
              n = vnodes.selectAll("g.nodegroup")
                  .data(force.nodes())
                  .enter().append("svg:g")
                  .attr("class", "nodegroup")
                  .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")" });
                  
              n.append("svg:circle")
                  .attr("class", "node")
                  .attr("cx", 0)
                  .attr("cy", 0)
                  .attr("r", 5);

              var text = n.append("svg:g")
                  
              text.append("svg:text")
                  .attr("x", 8)
                  .attr("y", ".31em")
                  .attr("class", "shadow")
                  .text(function(d) { return d.topic });

              text.append("svg:text")
                  .attr("x", 8)
                  .attr("y", ".31em")
                  .text(function(d) { return d.topic });

              node = vis.selectAll("g.nodegroup");
              link = vis.selectAll("line.visit_link, line.focus_link");
              force.start();
            }

            function tick() {
                node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

                link.attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });
            }

            document.documentElement.addEventListener('page-visit', function(event) {hit_topic(event.detail[0], event.detail[1], 'visit_link');}, false);
            document.documentElement.addEventListener('page-focus', function(event) {hit_topic(event.detail[0], event.detail[1], 'focus_link');}, false);
            restart();
        </script>
        
    </body>
</html>

